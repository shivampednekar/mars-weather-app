const API_KEY="RbjeH35Jm70bEjR558gWUtTMAuu16Dwf8lzF3vSc",API_URL=`https://api.nasa.gov/insight_weather/?api_key=${API_KEY}&feedtype=json&ver=1.0`;console.log(API_KEY);const currentSolElement=document.querySelector("[data-current-sol]"),currentDateElement=document.querySelector("[data-current-date]"),currentTempHighElement=document.querySelector("[data-current-temp-high]"),currentTempLowElement=document.querySelector("[data-current-temp-low]"),windSpeedElement=document.querySelector("[data-wind-speed]"),windDirectionText=document.querySelector("[data-wind-direction-text]"),windDirectionArrow=document.querySelector("[data-wind-direction-arrow]"),previousWeatherToggle=document.querySelector(".show-previous-weather"),previousWeather=document.querySelector(".previous-weather");previousWeatherToggle.addEventListener("click",()=>{previousWeather.classList.toggle("show-weather")});const previousSolTemplate=document.querySelector("[data-previous-sol-template]"),previousSolContainer=document.querySelector("[data-previous-sols]"),unitToogle=document.querySelector("[data-unit-toogle]"),metricRadio=document.getElementById("cel"),imperialRadio=document.getElementById("fah");let selectedSolIndex;function displaySelectedSol(e){const t=e[selectedSolIndex];currentSolElement.innerText=t.sol,currentDateElement.innerText=displayDate(t.date),currentTempHighElement.innerText=displayTemperature(t.maxTemp),currentTempLowElement.innerText=displayTemperature(t.minTemp),windSpeedElement.innerText=displaySpeed(t.windSpeed),windDirectionArrow.style.setProperty("--direction",`${t.windDirectionDegrees}deg`),windDirectionText.innerText=t.windDirectionCardinal}function displayPreviousSols(e){previousSolContainer.innerHTML="",e.forEach((t,n)=>{const r=previousSolTemplate.content.cloneNode(!0);r.querySelector("[data-sol]").innerText=t.sol,r.querySelector("[data-date]").innerText=displayDate(t.date),r.querySelector("[data-temp-high]").innerText=displayTemperature(t.maxTemp),r.querySelector("[data-temp-low]").innerText=displayTemperature(t.minTemp),r.querySelector("[data-select-button]").addEventListener("click",()=>{selectedSolIndex=n,displaySelectedSol(e)}),previousSolContainer.appendChild(r)})}function displayDate(e){return e.toLocaleDateString(void 0,{day:"numeric",month:"long"})}function displayTemperature(e){let t=e;return isMetric()||(t=5/9*(e-32)),Math.round(t)}function displaySpeed(e){let t=e;return isMetric()||(t=e/1.609),Math.round(t)}function getWeather(){return fetch(API_URL).then(e=>e.json()).then(e=>{const{sol_keys:t,validity_checks:n,...r}=e;return Object.entries(r).map(([e,t])=>({sol:e,maxTemp:t.AT.mx,minTemp:t.AT.mn,windSpeed:t.HWS.av,windDirectionDegrees:t.WD.most_common.compass_degrees,windDirectionCardinal:t.WD.most_common.compass_point,date:new Date(t.First_UTC)}))})}function updateUnits(){const e=document.querySelectorAll("[data-speed-unit]"),t=document.querySelectorAll("[data-temp-unit]");e.forEach(e=>{e.innerText=isMetric()?"kph":"mph"}),t.forEach(e=>{e.innerText=isMetric()?"C":"F"})}function isMetric(){return metricRadio.checked}getWeather().then(e=>{selectedSolIndex=e.length-1,displaySelectedSol(e),displayPreviousSols(e),updateUnits(),unitToogle.addEventListener("click",()=>{let t=!isMetric();metricRadio.checked=t,imperialRadio.checked=!t,displaySelectedSol(e),displayPreviousSols(e),updateUnits()}),metricRadio.addEventListener("change",()=>{displaySelectedSol(e),displayPreviousSols(e),updateUnits()}),imperialRadio.addEventListener("change",()=>{displaySelectedSol(e),displayPreviousSols(e),updateUnits()})});
